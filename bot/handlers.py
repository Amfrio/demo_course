import asyncio

import aiohttp
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, WebAppData
from aiogram.types.input_media import InputMedia
from data_manager import data_manager
from bot.keyboards import *
import random

router = Router()

# Media content
MEDITATION_IMAGES = [
    "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800",
    "https://images.unsplash.com/photo-1545389336-cf090694435e?w=800",
    "https://images.unsplash.com/photo-1508672019048-805c876b67e2?w=800"
]

@router.message(CommandStart())
async def start_handler(message: Message):
    """Handle /start command"""
    user_id = str(message.from_user.id)
    await data_manager.update_user(user_id,
                                   {
                                       "user_id": user_id,
                                       "current_lesson": 0,
                                       "completed_lessons": [],
                                       "achievements": [],
                                       "total_time": 0,
                                       "last_activity": None,
                                       "meditation_streak": 0,
                                       "coins": 0,
                                       "gifts_received": [],
                                       "quiz_scores": {},
                                       "payment_status": "free"
                                   }
                                   )
    user_data = await data_manager.get_user(user_id)
    
    welcome_text = f"""
üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **"–ü—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏"**! 

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ –û–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π üïäÔ∏è
‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ üòå
‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é üéØ
‚Ä¢ –ù–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –≤ –∂–∏–∑–Ω–∏ ‚öñÔ∏è

üíé **–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:** {len(user_data.get('completed_lessons', []))}
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {len(user_data.get('achievements', []))}
ü™ô **–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç:** {user_data.get('coins', 0)}

–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?
"""
    
    await message.answer_photo(
        photo=random.choice(MEDITATION_IMAGES),
        caption=welcome_text,
        reply_markup=get_start_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "about_course")
async def about_course_handler(callback: CallbackQuery):
    """Tell about the course"""
    text = """
üßò‚Äç‚ôÄÔ∏è **–û –∫—É—Ä—Å–µ "–ü—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏"**

–≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç:

üåü **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ 3 –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–∞ —Å –≤–∏–¥–µ–æ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
‚Ä¢ –ó–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üìö **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞:**
1. **–û—Å–Ω–æ–≤—ã –º–µ–¥–∏—Ç–∞—Ü–∏–∏** - —Ç–µ–æ—Ä–∏—è –∏ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏
2. **–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è** - –≤–∏–¥–µ–æ-—É—Ä–æ–∫ —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
3. **–ì–ª—É–±–æ–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è** - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** 15-20 –º–∏–Ω—É—Ç –Ω–∞ —É—Ä–æ–∫
üéØ **–£—Ä–æ–≤–µ–Ω—å:** –¥–ª—è –≤—Å–µ—Ö, –≤–∫–ª—é—á–∞—è –Ω–æ–≤–∏—á–∫–æ–≤

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏?
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_course_intro_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "tell_more")
async def tell_more_handler(callback: CallbackQuery):
    """Tell more about benefits"""
    text = """
üåà **–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–ª—å–∑–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:**

**–ù–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:**
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ (–≥–æ—Ä–º–æ–Ω–∞ —Å—Ç—Ä–µ—Å—Å–∞) –Ω–∞ 25% üìâ
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ 40% üß†
‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –Ω–∞ 60% üò¥
‚Ä¢ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ üí™

**–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –Ω–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:**
üí¨ "–£–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Å—Ç–∞–ª —Å–ø–∞—Ç—å –ª—É—á—à–µ!" - –ê–Ω–Ω–∞
üí¨ "–ù–∞–∫–æ–Ω–µ—Ü –Ω–∞—É—á–∏–ª—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º" - –ú–∞–∫—Å–∏–º
üí¨ "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º" - –ï–ª–µ–Ω–∞

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:**
üéµ –ó–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∞—è –º—É–∑—ã–∫–∞
üéÆ –ò–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üì± –£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ Telegram
‚è∞ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è

–ö–∞–∫–∞—è —Ü–µ–ª—å —É —Ç–µ–±—è?
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_motivation_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "results")
async def results_handler(callback: CallbackQuery):
    """Show expected results"""
    text = """
üìà **–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å:**

**–ü–æ—Å–ª–µ 1-–≥–æ —É—Ä–æ–∫–∞:**
‚ú® –û—Å–≤–æ–∏—à—å –±–∞–∑–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è
‚ú® –ü–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ
‚ú® –ü–æ–π–º–µ—à—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ–¥–∏—Ç–∞—Ü–∏–∏

**–ü–æ—Å–ª–µ 2-–≥–æ —É—Ä–æ–∫–∞:**  
üåä –ù–∞—É—á–∏—à—å—Å—è –≥–ª—É–±–æ–∫–æ–º—É —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é
üåä –û—Å–≤–æ–∏—à—å —Ç–µ—Ö–Ω–∏–∫—É "4-7-8"
üåä –°–º–æ–∂–µ—à—å –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å 5-10 –º–∏–Ω—É—Ç

**–ü–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞:**
üèÜ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏
üèÜ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏
üèÜ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è –∏ –ø–æ–∫–æ–π

‚≠ê **–ë–æ–Ω—É—Å—ã:**
‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–≤—É–∫–æ–≤ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–∞

–û–ø—Ä–µ–¥–µ–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_experience_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.in_(["stress_relief", "focus", "sleep"]))
async def motivation_selected(callback: CallbackQuery):
    """Handle motivation selection"""
    motivations = {
        "stress_relief": "—Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ –æ–±—Ä–µ—Å—Ç–∏ –ø–æ–∫–æ–π üòå",
        "focus": "—É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —è—Å–Ω–æ—Å—Ç—å —É–º–∞ üß†",
        "sleep": "—É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏ –æ—Ç–¥—ã—Ö–∞ üò¥"
    }
    
    selected = motivations[callback.data]
    
    await data_manager.update_user(
        str(callback.from_user.id), 
        {"motivation": callback.data}
    )
    
    text = f"""
–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è —Ü–µ–ª—å - {selected}

–ù–∞—à –∫—É—Ä—Å –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏! 
–ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_experience_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.in_(["beginner", "intermediate", "advanced"]))
async def experience_selected(callback: CallbackQuery):
    """Handle experience level selection"""
    levels = {
        "beginner": "–Ω–æ–≤–∏—á–æ–∫ üÜï - –Ω–∞—á–Ω–µ–º —Å —Å–∞–º—ã—Ö –æ—Å–Ω–æ–≤!",
        "intermediate": "—É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç üå± - —É–≥–ª—É–±–∏–º –∑–Ω–∞–Ω–∏—è!",
        "advanced": "–æ–ø—ã—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫ üßò‚Äç‚ôÇÔ∏è - –Ω–∞–π–¥–µ–º –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏!"
    }
    
    selected = levels[callback.data]
    
    await data_manager.update_user(
        str(callback.from_user.id), 
        {"experience": callback.data}
    )
    
    text = f"""
–ü–æ–Ω—è—Ç–Ω–æ, —Ç—ã {selected}

üéâ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

–ö—É—Ä—Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. 
–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ç–µ–º–ø –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.

**–ß—Ç–æ –¥–∞–ª—å—à–µ:**
1. –ò–∑—É—á–∏—à—å –æ—Å–Ω–æ–≤—ã –º–µ–¥–∏—Ç–∞—Ü–∏–∏
2. –í—ã–ø–æ–ª–Ω–∏—à—å –ø–µ—Ä–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è  
3. –ü–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —É—Å–ø–µ—Ö–∏
4. –ü—Ä–æ–¥–æ–ª–∂–∏—à—å —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏

üöÄ **–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é?**
–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 7-10 –º–∏–Ω—É—Ç!
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_ready_to_start_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "want_to_learn")
async def want_to_learn_handler(callback: CallbackQuery):
    """Handle direct start"""
    text = """
üî• **–û—Ç–ª–∏—á–Ω–æ! –ú–æ—Ç–∏–≤–∞—Ü–∏—è - —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É!**

–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É. 
–¢—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è:

üí´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏
üí´ –ü–æ–≤—ã—à–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
üí´ –£–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏
üí´ –û–±—Ä–µ—Ç–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã

–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫–∞—è —Ü–µ–ª—å —É —Ç–µ–±—è –≥–ª–∞–≤–Ω–∞—è:
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_motivation_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "achievements")
async def achievements_handler(callback: CallbackQuery):
    """Show user achievements"""
    user_id = str(callback.from_user.id)
    user_data = await data_manager.get_user(user_id)
    
    achievements = user_data.get('achievements', [])
    completed_lessons = user_data.get('completed_lessons', [])
    
    achievement_list = {
        "first_lesson": "üéì –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫",
        "quiz_master": "üß† –ú–∞—Å—Ç–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω", 
        "daily_practice": "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
        "meditation_streak": "üî• –°–µ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π",
        "course_complete": "üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"
    }
    
    text = f"""
üèÜ **–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**

"""
    
    if achievements:
        for ach in achievements:
            if ach in achievement_list:
                text += f"‚úÖ {achievement_list[ach]}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üå±\n"
    
    text += f"""

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {len(completed_lessons)}/3
‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {user_data.get('coins', 0)} ü™ô
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏: {user_data.get('total_time', 0)} –º–∏–Ω

{'' if completed_lessons else '–ù–∞—á–Ω–∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üöÄ'}
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_back_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "stats")
async def stats_handler(callback: CallbackQuery):
    """Show user statistics"""
    user_id = str(callback.from_user.id)
    user_data = await data_manager.get_user(user_id)
    
    completed_lessons = user_data.get('completed_lessons', [])
    quiz_scores = user_data.get('quiz_scores', {})
    
    text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

**–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(completed_lessons)}/3 ({len(completed_lessons)/3*100:.0f}%)
‚Ä¢ –°–µ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π: {user_data.get('meditation_streak', 0)} –¥–Ω–µ–π üî•
‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –º–æ–Ω–µ—Ç: {user_data.get('coins', 0)} ü™ô

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω:**
"""
    
    if quiz_scores:
        total_score = 0
        for lesson_id, score in quiz_scores.items():
            text += f"‚Ä¢ –£—Ä–æ–∫ {lesson_id}: {score}/3 ‚≠ê\n"
            total_score += score
        avg_score = total_score / len(quiz_scores)
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω\n"
    
    text += f"""

**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10] if user_data.get('last_activity') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üíé Premium' if user_data.get('payment_status') == 'paid' else 'üÜì Free'}

{'' if completed_lessons else '–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üßò‚Äç‚ôÄÔ∏è'}
"""
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=get_back_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "back_to_start")
async def back_to_start_handler(callback: CallbackQuery):
    """Go back to start menu"""
    user_id = str(callback.from_user.id)
    user_data = await data_manager.get_user(user_id)
    
    welcome_text = f"""
üå∏ **"–ü—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏"**

–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! üëã

üíé **–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:** {len(user_data.get('completed_lessons', []))}
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {len(user_data.get('achievements', []))}
ü™ô **–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç:** {user_data.get('coins', 0)}

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?
"""
    
    await callback.message.edit_caption(
        caption=welcome_text,
        reply_markup=get_start_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "check_lesson_completion")
async def check_lesson_completion_handler(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    try:
        from config import config

        async with aiohttp.ClientSession() as session:
            for lesson_id in [1, 2]:
                async with session.get(
                    f"{config.webapp_url}/api/lesson/{lesson_id}/check_completion",
                    params={"user_id": user_id}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("completed"):
                            score = data.get("score", 0)
                            await data_manager.complete_lesson(user_id, lesson_id, score)

                        # Add achievement
                        if lesson_id == 1:
                            await data_manager.add_achievement(user_id, "first_lesson")
                        elif lesson_id == 2:
                            await data_manager.add_achievement(user_id, "quiz_master")

                        # Send congratulations
                        percentage = data.get("percentage", 0)
                        congratulations = f"""
üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —É—Ä–æ–∫–∞ {lesson_id}!**

–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ({percentage:.0f}%)!

–¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏!
–¢–≤–æ—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É.

üí´ **–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:**
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –≤ –º–æ–∑–≥–µ —É–∫—Ä–µ–ø–∏–ª–∏—Å—å
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ —Å–Ω–∏–∑–∏–ª—Å—è
‚Ä¢ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–≤—ã—Å–∏–ª–∞—Å—å

üéÅ **–í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!**
–ó–∞ —Ç–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è —Ç—ã –∑–∞—Å–ª—É–∂–∏–ª –Ω–∞–≥—Ä–∞–¥—É.
–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:
"""

                        await callback.message.answer(
                            text=congratulations,
                            reply_markup=get_gift_selection_keyboard(),
                            parse_mode="Markdown"
                        )
                        return

        await callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤. –ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–∫ –≤ WebApp —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)

    except SystemError as e:
        print(f"Error checking lesson completion: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)